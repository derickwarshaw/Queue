class SocketRequest {

  /**
   * Manage a socket.
   * @param {Object} requestSocket Socket generated by Socket.io
   * @returns {Object} SocketRequest instance.
   */
  constructor (requestSocket) {
    this.socketObejct = requestSocket;
    this.socketRequestId = requestSocket.client.id;
    this.socketRequestPath = requestSocket.client.request.url;
    this.socketRequestMethod = requestSocket.client.request.method;
  }

  /**
   * Generate a summary about the request.
   * @returns {String} Summary about the request.
   */
  summary () {
    return `${this.socketRequestMethod} -> ${this.socketRequestPath} (${this.socketRequestId})`;
  }

  /**
   * Authenticate a user.
   * @param {Function} requestHandler Custom handler function.
   */
  authenticate (requestHandler) {
    this.socketObejct.on('user:auth', requestData => requestHandler('Authenticate', requestData));
  }

  /**
   * Report authentication to a user.
   * @param {Object} establishedUser Signed user object.
   */
  authenticated (establishedUser) {
    this.socketObejct.emit('user:est', establishedUser);
  }

  /**
   * Report authorisation failure to a user.
   * @param {Error} unauthorisedReason Reason for failure.
   */
  unauthorised (unauthorisedReason) {
    this.socketObejct.emit('user:unauth', unauthorisedReason);
  }

  /**
   * Request a client.
   * @param {Function} requestHandler Custom request handler.
   */
  request (requestHandler) {
    this.socketObejct.on('client:auth', requestData => requestHandler('Request', requestData));
  }

  /**
   * Report client retrieval to a user.
   * @param {Object} requestedClient Client retrieved.
   */
  requested (requestedClient) {
    this.socketObejct.emit('client:est', requestedClient);
  }

  /**
   * Report a client rejection to a user.
   * @param {Error} rejectedReason Reason for rejection.
   */
  rejected (rejectedReason) {
    this.socketObejct.emit('client:reject', rejectedReason);
  }
}

module.exports = SocketRequest;