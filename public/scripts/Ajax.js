class Ajax{constructor(a,e){Boolean("string"==typeof openType),Boolean("string"==typeof openURL);if(!a||!e)throw Error("ajaxType and ajaxURL must be strings.");this.ajaxInstance=new XMLHttpRequest,this.ajaxType=a,this.ajaxURL=e,this.ajaxResponse={},this.ajaxReady=this.ajaxInstance.readyState,this.ajaxStatus=this.ajaxInstance.status,this.ajaxState=null,this.ajaxSecurity=this.ajaxInstance.withCredentials}open(a,e){const t=this;return new Promise(function(s,n){const o=Boolean("boolean"==typeof a),r=Boolean("object"==typeof e);if(o&&r){t.ajaxInstance.onreadystatechange=function(a){if(t.ajaxState=a,t.ajaxReady=this.readyState,t.ajaxStatus=this.status,4===t.ajaxReady&&200===t.ajaxStatus){t.ajaxResponse.responseType=this.responseType,t.ajaxResponse.responseText=this.responseText;try{s(JSON.parse(t.ajaxResponse.responseText))}catch(a){s(t.ajaxResponse.responseText)}}};try{t.ajaxInstance.open(t.ajaxType,t.ajaxURL,!0)}catch(a){n(new Error("Invalid URL."))}t.ajaxInstance.send(e),t.ajaxInstance.error=(a=>{t.ajaxState=a,t.ajaxReady=this.readyState,t.ajaxState=this.status,n(new Error("Ajax was aborted."))}),t.ajaxInstance.abort=(a=>{t.ajaxState=a,t.ajaxReady=this.readyState,t.ajaxState=this.status,n(new Error("Ajax was aborted."))})}else n(new Error("Invalid parameter."))})}static validate(a,e){return new Promise(function(t,s){const n=Boolean("string"==typeof a),o=Boolean("string"==typeof e);if(n&&o){const n=new XMLHttpRequest;n.onreadystatechange=function(s){t(new Ajax(a,e))},n.open(a,e,!0),n.send(),n.onerror=s}})}}
